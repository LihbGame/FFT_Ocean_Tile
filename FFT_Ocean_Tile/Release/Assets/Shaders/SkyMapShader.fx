///////////////////////////////////////////////////////////////////////////////
// UI Shader Effect.
// Shader to handle UI Display.
///////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
// Vertex Shader Input
////////////////////////////////////////////////////////////////
struct VertexInput
{
	float3 pos   : POSITION;
	float4 color : COLOUR;
	float3 normal : NORMAL;
	float2 uv : TEXCOORD;
};

/////////////////////////////////////////////////////////////////
// Fragment Shader Input
/////////////////////////////////////////////////////////////////
struct PixelInput
{
	float4 pos : SV_POSITION;
	float3 uv : TEXCOORD0;
};

/////////////////////////////////////////////////////////////////
// Effect Constant Buffers
/////////////////////////////////////////////////////////////////
cbuffer PerFrameCB : register(b0)
{
	matrix matProjection;
	matrix matView;
	float4 vViewPos;
	float  time;
	float3 zones;
};

cbuffer PerDrawCB : register(b1)
{
	matrix matMVP;
	matrix matModel;
};

/////////////////////////////////////////////////////////////////
// Textures
/////////////////////////////////////////////////////////////////
TextureCube g_SkyMap : register(t0);
SamplerState g_Sampler0 : register (s0);


/////////////////////////////////////////////////////////////////
// Vertex Shader
/////////////////////////////////////////////////////////////////

PixelInput VS_Skymap(VertexInput IN)
{
	PixelInput OUT;

	OUT.pos = mul(float4(IN.pos, 1.0), matMVP);
	OUT.uv = IN.pos;

	return OUT;
}

/////////////////////////////////////////////////////////////////
// Fragment Shader
/////////////////////////////////////////////////////////////////
float4 PS_Skymap(PixelInput IN) : SV_TARGET
{
	return g_SkyMap.Sample(g_Sampler0, IN.uv);
}

